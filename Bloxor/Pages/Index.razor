@page "/"
@using System.Drawing
@using Blazor.Extensions
@using Bloxor.Game
@using Bloxor.Glazor

@inject IJSRuntime JsRuntime;

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    BECanvasComponent _canvas;

    // ElementReference _spritesheet;
    //
    // Point _spritePosition = Point.Empty;
    // Point _spriteDirection = new Point(1, 1);
    // float _spriteSpeed = 0.25f;

    //Sprite _sprite;
    
    readonly GameEngine _gameEngine = new GameEngine();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
            var canvas = await _canvas.CreateCanvas2DAsync();
            await _gameEngine.InitAsync(canvas);
            _gameEngine.AddObject(new BloxorManager(_gameEngine));
        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int screenWidth, int screenHeight)
    {
        _gameEngine.Update(screenWidth, screenHeight, timeStamp);
        await _gameEngine.Render();
    }
    
    [JSInvokable]
    public async ValueTask OnMouseMove(int mouseX, int mouseY)
    {
        _gameEngine.OnMouseMove(mouseX, mouseY);
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(object button)
    {
        _gameEngine.OnMouseDown();
    }

    [JSInvokable]
    public async ValueTask OnMouseUp(object button)
    {
        _gameEngine.OnMouseUp();
    }    
}
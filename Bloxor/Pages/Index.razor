@page "/"
@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@inject IJSRuntime JsRuntime;

<img @ref="_spritesheet" hidden src="assets/blazor.png" />

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    BECanvasComponent _canvas;

    ElementReference _spritesheet;

    Point _spritePosition = Point.Empty;
    Point _spriteDirection = new Point(1, 1);
    float _spriteSpeed = 0.25f;

    Sprite _sprite;

    readonly GameTime _gameTime = new GameTime();

    Canvas2DContext _context;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
            _context = await _canvas.CreateCanvas2DAsync();

            _sprite = new Sprite()
            {
                Size = new Size(200, 200),
                SpriteSheet = _spritesheet
            };
        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int screenWidth, int screenHeight)
    {
        _gameTime.TotalTime = timeStamp;

        await Update(screenWidth, screenHeight);
        await Render(screenWidth, screenHeight);
    }

    private async ValueTask Update(int screenWidth, int screenHeight)
    {
        if (_spritePosition.X + _sprite.Size.Width >= screenWidth || _spritePosition.X < 0)
            _spriteDirection.X = -_spriteDirection.X;

        if (_spritePosition.Y +  _sprite.Size.Height >= screenHeight || _spritePosition.Y < 0)
            _spriteDirection.Y = -_spriteDirection.Y;

        _spritePosition.X += (int)(_spriteDirection.X * _spriteSpeed * _gameTime.ElapsedTime);
        _spritePosition.Y += (int)(_spriteDirection.Y * _spriteSpeed * _gameTime.ElapsedTime);
    }

    private async ValueTask Render(int width, int height)
    {
        await _context.ClearRectAsync(0, 0, width, height);
        await _context.SetFillStyleAsync("green");
        await _context.FillRectAsync(0, 0, 50, 50);
        await _context.DrawImageAsync(_sprite.SpriteSheet, _spritePosition.X, _spritePosition.Y, _sprite.Size.Width,  _sprite.Size.Height);
    }

}